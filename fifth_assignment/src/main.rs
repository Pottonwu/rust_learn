
macro_rules! create_function {
    ($fun : ident,$a : expr) => {
        fn $fun(b:u8) -> u32 {
            $a as u32 * b as u32
        }
        
    };
}



fn main() {
    let x:u8 = 3;
    create_function!(fod,3);
    println!("{}",fod(4));
}
/*宏的编译过程是指在Rust程序编译期间，宏被展开并替换为实际代码的过程。

当你在Rust程序中使用宏时，Rust编译器会在编译期间对宏进行处理。编译器首先会根据宏定义和提供的参数来选择一个匹配的规则，并使用该规则来生成代码。然后，编译器会将宏调用替换为生成的代码，从而将宏展开为实际的Rust代码。

在这个过程中，编译器会检查宏调用是否符合宏定义中指定的规则，并确保生成的代码是有效的Rust代码。如果宏调用不符合规则，或者生成的代码无效，编译器会报告错误。

在宏被展开之后，生成的代码会与程序中的其他代码一起进行编译和优化。这意味着宏展开后的代码与手写的Rust代码没有区别，并且可以获得相同的性能和优化。

总之，宏的编译过程包括选择匹配的规则、生成代码、替换宏调用和编译生成的代码等步骤。这个过程是在编译期间自动完成的，不需要程序员手动干预。

希望这能帮助你理解宏的编译过程。如果你还有其他问题，请随时告诉我。*/